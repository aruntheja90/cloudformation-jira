# Note, the development environment will only spin a min of 1 instance (Not HA Support)
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    This template deploys an instance for Mongo Master Instance.

Parameters: 

  PMServerEnv:
    Description: "Server Environment name."
    ConstraintDescription: "Choose an Environment from the drop down"
    Type: "String"
    AllowedValues: 
      - "dev"
      - "staging"
      - "prod"

  PMHostedZone:
    Description: "A reference to the Hosted Zone"
    Type: "String"

  PMDomainMongoSecondary2:
    Description: "A reference to the Mongo Secondary 2 FQDN domain name"
    Type: "String"

  PMKeyName:
    Description: "Enter an existing EC2 KeyPair. Default is mk2acc-nv"
    Type: "String"

  PMMongoSecondary:
    Description: "Enter Mongo available instance type. Default is m4.large."
    Type: "String"
    Default: "m4.large"
    AllowedValues: 
      - "t2.medium"
      - "m3.medium"
      - "c3.large"
      - "m4.large"

  PMRegionAMI:
    Description: "A reference to the Region AMI"
    Type: "String"

  PMMongoReplicatesetName:
    Description: "A reference to the Mongo Replica Set"
    Type: "String"

  PMIAMS3CWInstanceProfile:
    Description: "A reference to the IamInstanceProfile"
    Type: "String"

Resources:

  MyMongoSEC2EC2:
    Type: "AWS::EC2::Instance"
    Properties:
      KeyName:
        Ref: "PMKeyName"
      AvailabilityZone: !Select [ '1', !GetAZs ]
      InstanceType:
        Ref: "PMMongoSecondary"
      BlockDeviceMappings:
        # Root Mount Device
        - DeviceName: "/dev/xvda"
          Ebs:
            # Increasing the volume size will actually cause to spin another
            # ec2 instance and shut down the existing old volume
            VolumeSize: "50" # Default: 8GB
            VolumeType: "gp2"
            #DeleteOnTermination: "false"
        # Additional Mount Device - /log
        - DeviceName: "/dev/xvdb"
          Ebs:
            VolumeSize: "50"
            VolumeType: "gp2"
            #DeleteOnTermination: "false"
        # Additional Mount Device (RAID10) - /data
        - DeviceName: "/dev/xvdc"
          Ebs:
            VolumeSize: "50"
            VolumeType: "gp2"
            #DeleteOnTermination: "false"
        # Additional Mount Device (RAID10) - /data
        - DeviceName: "/dev/xvdd"
          Ebs:
            VolumeSize: "50"
            VolumeType: "gp2"
            #DeleteOnTermination: "false"
        # Additional Mount Device (RAID10) - /data
        - DeviceName: "/dev/xvde"
          Ebs:
            VolumeSize: "50"
            VolumeType: "gp2"
            #DeleteOnTermination: "false"
        # Additional Mount Device (RAID10) - /data
        - DeviceName: "/dev/xvdf"
          Ebs:
            VolumeSize: "50"
            VolumeType: "gp2"
            #DeleteOnTermination: "false"
      IamInstanceProfile:
        Ref: "PMIAMS3CWInstanceProfile"
      ImageId:
        Ref: "PMRegionAMI"
      SubnetId:
        Fn::ImportValue: !Sub "${PMServerEnv}-PublicSubnet2"
      SecurityGroupIds:
        - Fn::ImportValue: !Sub "${PMServerEnv}-MyMongoSG"
      Tags:
        - Key: "Name"
          Value: !Sub "${PMDomainMongoSecondary2}"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          apt-get update
          apt-get upgrade -y
          # Install AWS cfn-bootstrap utilities
          apt-get -y install python-setuptools
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

          # Pre-Install & Pre-setup
          export DEBIAN_FRONTEND=noninteractive
          apt-get install -y xfsprogs dracut
          apt-get -q -y install mdadm --no-install-recommends
          sudo touch /var/lib/cloud/instance/locale-check.skip
          echo 'LC_ALL="en_US.UTF-8"' >> /etc/default/locale
          echo '${PMDomainMongoSecondary2}' > /etc/hostname
          # Update hostname on the fly
          hostname ${PMDomainMongoSecondary2}

          # Append hostname that resolve to proper fqdn, hostname -f
          # This is mainly use by monitoring server
          echo '127.0.0.1 ${PMDomainMongoSecondary2}' >> /etc/hosts

          # Create Partition (Leave the 2 empty space line below)
          hdd="/dev/xvdb /dev/xvdc /dev/xvdd /dev/xvde /dev/xvdf"
          for i in $hdd;do
          echo "d
          n
          p
          1


          w
          "|fdisk $i;done 

          # Setup RAID 10
          mdadm --create --verbose /dev/md0 -c 256 --level=10 --raid-devices=4 /dev/xvdc1 /dev/xvdd1 /dev/xvde1 /dev/xvdf1
          mdadm --detail --scan --verbose >> /etc/mdadm/mdadm.conf

          # Format Partition
          mkfs.ext4 -F /dev/xvdb1
          mkfs.xfs -f /dev/md0

          # Create Directory
          mkdir -p /data
          mkdir -p /log
          mkdir -p /journal

          # Get Partition Blkid and Install fstab
          PART_ID=$(blkid -o value -s UUID /dev/xvdb1)
          RAID_ID=$(blkid -o value -s UUID /dev/md0)
          echo "UUID=$PART_ID	/log	ext4" >> /etc/fstab
          echo "UUID=$RAID_ID	/data	xfs defaults,auto,noatime,noexec 0 0" >> /etc/fstab

          # Install mount & Change directory ownership
          mount -a
          chown -R mongodb:mongodb /data
          chown -R mongodb:mongodb /log
          chown -R mongodb:mongodb /journal

          #Setup MongoDB
          service mongod stop

          echo "# Where and how to store data.
          storage:
            dbPath: /data
            engine: \"wiredTiger\"
            wiredTiger:
              collectionConfig:
                blockCompressor: snappy
            directoryPerDB: true
            journal:
              enabled: false

          # where to write logging data.
          systemLog:
            destination: file
            logAppend: true
            logRotate: reopen
            path: \"/log/mongod.log\"
            timeStampFormat: iso8601-utc

          # network interfaces
          net:
            ssl:
              mode: requireSSL
              PEMKeyFile: /etc/ssl/certs/mongodb.pem
              CAFile: /etc/ssl/certs/CA.moneylion.crt
            port: 27017
            bindIp: 0.0.0.0
            http:
              enabled: false
              RESTInterfaceEnabled: false

          security:
            keyFile: \"/etc/mongodb-keyfile\"
            authorization: \"enabled\"
            #authorization: \"disabled\"

          setParameter:
            enableLocalhostAuthBypass: false

          replication:
            replSetName: \"${PMMongoReplicatesetName}\"
          " > /etc/mongod.conf

          # MongoDB Start
          service mongod start

          # Signal Terminate
          /usr/local/bin/cfn-signal -e 0 -r 'server setup complete' "${WaitHandle}"  > /tmp/userdata.log

  WaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"

  WaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    Properties:
      Handle: !Ref "WaitHandle"
      Timeout: '600'

  EIPAddress:
    Type: "AWS::EC2::EIP"

  EIPAssoc:
    Type: "AWS::EC2::EIPAssociation"
    Properties:
      InstanceId: !Ref "MyMongoSEC2EC2"
      EIP: !Ref "EIPAddress"


  DNSRecordMongoSEC2EC2:
    Type: "AWS::Route53::RecordSet"
    DependsOn:
    - "EIPAssoc"
    Properties:
      HostedZoneName: !Sub "${PMHostedZone}."
      Comment: "DNS name for Mongo Secondary 2."
      Name: !Sub "${PMDomainMongoSecondary2}."
      Type: 'A'
      TTL: '600'
      ResourceRecords:
      - Fn::GetAtt:
        - "MyMongoSEC2EC2"
        - "PublicIp"

Outputs:

  MyMongoSEC2EC2IPAddress:
    Description: "Public IP address of the new EC2 instance"
    Value:
      Fn::GetAtt:
      - "MyMongoSEC2EC2"
      - "PublicIp"
