# Note : The Cloudformation Security Group IP address is open by default (testing purpose).
# You should update Security Group Access with your own IP Address to ensure your instances security.
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    This template contains the Security Groups and Network Access Control
    required by our entire stack. We create them in a seperate nested template,
    so they can be referenced by all of the other nested templates.

Parameters:

  PMServerEnv:
    Description: "Server Environment name."
    ConstraintDescription: "Choose an Environment from the drop down"
    Type: "String"

  PMVPC:
    Description: "VPC to launch instances into"
    Type: "AWS::EC2::VPC::Id"

  PMNACL:
    Description: "Network ACL Id"
    Type: "String"

  PMOWNIP:
    Description: "Update this with your own office/home public ip address"
    Type: "String"


Resources:
  MyJiraSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      VpcId: !Ref "PMVPC"
      GroupDescription: "Jira Instance Security Group"
      SecurityGroupIngress:
        - IpProtocol: 'icmp'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
        - CidrIp: !Ref "PMOWNIP"
          FromPort: "22"
          IpProtocol: "tcp"
          ToPort: "22"
        - FromPort: "8000"
          IpProtocol: "tcp"
          SourceSecurityGroupId:
            Ref: "JiraELBSG"
          ToPort: "8000"
        - FromPort: "443"
          IpProtocol: "tcp"
          SourceSecurityGroupId:
            Ref: "JiraELBSG"
          ToPort: "443"
        - FromPort: "80"
          IpProtocol: "tcp"
          SourceSecurityGroupId:
            Ref: "JiraELBSG"
          ToPort: "80"
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: "Name"
          Value: !Sub "${PMServerEnv}-MyJiraSG"

  # Allow RDS connection.
  MyRDSSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref "PMVPC"
      GroupDescription: "Security group for RDS DB Instance."
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
      - FromPort: "3306"
        IpProtocol: "tcp"
        SourceSecurityGroupId:
          Ref: "MyJiraSG"
        ToPort: "3306"
      Tags:
        - Key: "Name"
          Value: !Sub "${PMServerEnv}-MyRDSSG"

  # Jira Web Proxy Elastic Load Balancer
  JiraELBSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "ELB-JiraELBSG"
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
      - IpProtocol: 'icmp'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: '0.0.0.0/0'
      - CidrIp: "0.0.0.0/0"
        FromPort: "80"
        IpProtocol: "tcp"
        ToPort: "80"
      - CidrIp: "0.0.0.0/0"
        FromPort: "443"
        IpProtocol: "tcp"
        ToPort: "443"
      VpcId: !Ref "PMVPC"
      Tags:
        - Key: "Name"
          Value: !Sub "${PMServerEnv}-JiraELBSG"
  #####################################################################################
  # Additional Firewall Protection (inbound and outbound traffic at the subnet level)
  ####### INBOUND HTTP Network ACL RULES ##############################################
  InboundHTTPNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PMNACL"
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '80'
        To: '80'

  ####### INBOUND HTTPS Network ACL RULES #######
  InboundHTTPSNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PMNACL"
      RuleNumber: '200'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '443'
        To: '443'

  ####### INBOUND SSH Network ACL RULES #######
  InboundSSHNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PMNACL"
      RuleNumber: '300'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: !Ref "PMOWNIP"
      PortRange:
        From: '22'
        To: '22'

  ####### INBOUND MYSQL Network ACL RULES #######
  InboundMYSQLNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PMNACL"
      RuleNumber: '400'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: !Ref "PMOWNIP"
      PortRange:
        From: '3306'
        To: '3306'

  ####### INBOUND Ephemeral Ports Network ACL RULES #######
  InboundEPHNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PMNACL"
      RuleNumber: '500'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '1024'
        To: '65535'

  ####### INBOUND ICMP Network ACL RULES #######
  InboundICMPNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PMNACL"
      RuleNumber: '600'
      Protocol: "1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      Icmp:
        Code: "-1"
        Type: "-1"

  ####### OUTBOUND HTTP Network ACL RULES #######
  OutboundHTTPNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PMNACL"
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '80'
        To: '80'

  ####### OUTBOUND HTTPS Network ACL RULES #######
  OutboundHTTPSNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PMNACL"
      RuleNumber: '200'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '443'
        To: '443'

  ####### OUTBOUND SSH Network ACL RULES #######
  OutboundSSHNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PMNACL"
      RuleNumber: '300'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: !Ref "PMOWNIP"
      PortRange:
        From: '22'
        To: '22'

  ####### OUTBOUND MYSQL Network ACL RULES #######
  OutboundMYSQLNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PMNACL"
      RuleNumber: '400'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: !Ref "PMOWNIP"
      PortRange:
        From: '3306'
        To: '3306'

  ####### OUTBOUND Ephemeral Ports Network ACL RULES #######
  OutboundEPHNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PMNACL"
      RuleNumber: '500'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '1024'
        To: '65535'

  ####### OUTBOUND ICMP Network ACL RULES #######
  OutboundICMPNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PMNACL"
      RuleNumber: '600'
      Protocol: "1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      Icmp:
        Code: "-1"
        Type: "-1"


Outputs:

  MyJiraSG: 
    Description: "A reference to the security group for Jira hosts"
    Value: !Ref "MyJiraSG"
    Export:
      Name: !Sub "${PMServerEnv}-MyJiraSG"

  MyRDSSG: 
    Description: "A reference to the security group for Mysql RDS"
    Value: !Ref "MyRDSSG"
    Export:
      Name: !Sub "${PMServerEnv}-MyRDSSG"

  JiraELBSG: 
    Description: "A reference to the security group for Jira Elb proxy"
    Value: !Ref "JiraELBSG"
    Export:
      Name: !Sub "${PMServerEnv}-JiraELBSG"
