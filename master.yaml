# Note : The Cloudformation Security Group IP address is open by default (testing purpose).
# You should update Security Group Access with your own IP Address to ensure your instances security.
#
# Prerequisites
# Before you can start this process, you need the following:
# - Your AWS account must have one VPC available to be created in the selected region
# - Amazon EC2 key pair
# - Installed Domain in Route 53.
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    This is a master template to create a Atlassian Jira and Atlassian Bamboo.

    Last Modified: 24th September 2017
    Author: Thinegan Ratnam <thinegan@thinegan.com>

###############################################################################################################

Parameters: 

  PMOWNIP:
    Default: "0.0.0.0/0"
    Description: "Update this with your own office/home public ip address"
    Type: "String"

  PMKeyName:
    Default: "mk2acc-nv"
    Description: "Enter an existing EC2 KeyPair. Default is mk2acc-nv."
    Type: "String" 

  PMTemplateURL:
    Default: "https://s3.amazonaws.com/cf-templates-hyv79l0oex7c-us-east-1/cloudformation-atlassian/infrastructure"
    Description: "Trying running from own directory/workstation."
    Type: "String"

  PMHostedZone:
    Default: "crytera.com"
    Description: "Enter an existing Hosted Zone."
    Type: "String"

  PMDatabasePassword:
    Default: "0bee082a464" #Sample password do not use. Make new pass from parameter.
    Description: "Enter a password."
    Type: "String"

  PMJiraInstanceType: 
    Description: "Enter an instance type. Default is t2.micro."
    Type: "String"
    Default: "t2.micro"
    AllowedValues: 
      - "t2.micro"
      - "t2.medium"
      - "m4.large"
      - "m4.xlarge"

####### Condition Setup #######
Conditions:
  UseProdEnv: !Equals [ !Ref "PMJiraInstanceType", "prod" ]

###############################################################################################################
#
# For any additional region & Env, you can add by yourself below.
Mappings:
  EnvMap:

    dev:
      AutoscaleMin: '1'
      AutoscaleMax: '1'
      AutoscaleDes: '1'
      DomainJira: "dev-jira.crytera.com"
      PMVpcCIDR: "10.0.0.0/16"
      PMPublicSubnet1CIDR: "10.0.1.0/24"
      PMPublicSubnet2CIDR: "10.0.2.0/24"
      PMPrivateSubnet1CIDR: "10.0.3.0/24"
      PMPrivateSubnet2CIDR: "10.0.4.0/24"

    staging:
      AutoscaleMin: '1'
      AutoscaleMax: '1'
      AutoscaleDes: '1'
      DomainJira: "staging-jira.crytera.com"
      PMVpcCIDR: "10.1.0.0/16"
      PMPublicSubnet1CIDR: "10.1.1.0/24"
      PMPublicSubnet2CIDR: "10.1.2.0/24"
      PMPrivateSubnet1CIDR: "10.1.3.0/24"
      PMPrivateSubnet2CIDR: "10.1.4.0/24"

    prod:
      AutoscaleMin: '1'
      AutoscaleMax: '1'
      AutoscaleDes: '1'
      DomainJira: "prod-jira.crytera.com"
      PMVpcCIDR: "10.2.0.0/16"
      PMPublicSubnet1CIDR: "10.2.1.0/24"
      PMPublicSubnet2CIDR: "10.2.2.0/24"
      PMPrivateSubnet1CIDR: "10.2.3.0/24"
      PMPrivateSubnet2CIDR: "10.2.4.0/24"

  RegionMap:
    # Default North Virginia
    us-east-1:
      # Amazon Linux AMI 2017.03.1 (HVM), SSD Volume Type
      AMI: "ami-4fffc834"
      # Update with your own cert ARN HERE!
      # Assuming you have already upload to AWS Certificate Manager
      CertARN: "arn:aws:acm:us-east-1:210406761874:certificate/6e8e02b1-bce8-43f3-9e00-23050cd6f1ff"

###############################################################################################################

Resources:

  MyIAMRole:
    Type: "AWS::CloudFormation::Stack"
    #Condition: "UseProdEnv"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/atlassian-iam.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"

  MyS3Bucket:
    Type: "AWS::CloudFormation::Stack"
    #Condition: "UseProdEnv"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/atlassian-s3bucket.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"

  MyVPC:
    Type: "AWS::CloudFormation::Stack"
    #Condition: "UseProdEnv"
    DependsOn:
    - "MyS3Bucket"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/atlassian-vpc.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMVpcCIDR: !FindInMap ["EnvMap", !Ref "AWS::StackName", "PMVpcCIDR"]
        PMPublicSubnet1CIDR: !FindInMap ["EnvMap", !Ref "AWS::StackName", "PMPublicSubnet1CIDR"]
        PMPublicSubnet2CIDR: !FindInMap ["EnvMap", !Ref "AWS::StackName", "PMPublicSubnet2CIDR"]
        PMPrivateSubnet1CIDR: !FindInMap ["EnvMap", !Ref "AWS::StackName", "PMPrivateSubnet1CIDR"]
        PMPrivateSubnet2CIDR: !FindInMap ["EnvMap", !Ref "AWS::StackName", "PMPrivateSubnet2CIDR"]
        PMFlowLogRole: !GetAtt "MyIAMRole.Outputs.VPCFlowLogRoleArn"

  MySecurityGroup:
    Type: "AWS::CloudFormation::Stack"
    #Condition: "UseProdEnv"
    DependsOn:
    - "MyVPC"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/atlassian-securitygroup.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMOWNIP: !Ref "PMOWNIP"
        PMVPC: !GetAtt "MyVPC.Outputs.VPC"
        PMNACL: !GetAtt "MyVPC.Outputs.MyNetworkACL"

  MyRDS:
    Type: "AWS::CloudFormation::Stack"
    #Condition: "UseProdEnv"
    DependsOn:
    - "MySecurityGroup"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/atlassian-rds.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        DatabaseUser: "startupadmin"
        DatabasePassword: !Ref "PMDatabasePassword"
        DatabaseName: !Sub "${AWS::StackName}jiradb"
        DatabaseSize: '5'
        DatabaseEngine: "mysql"
        DatabaseInstanceClass: "db.t2.micro"
        PMRDSSG: !GetAtt "MySecurityGroup.Outputs.MyRDSSG"
        PMPrivateSubnets: !GetAtt "MyVPC.Outputs.PrivateSubnets"

  MyJiraELB:
    Type: "AWS::CloudFormation::Stack"
    #Condition: "UseProdEnv"
    DependsOn:
    - "MyRDS"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/atlassian-elb.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMDomain1CertARN: !FindInMap ["RegionMap", !Ref "AWS::Region", "CertARN"]
        PMJiraELBSG: !GetAtt "MySecurityGroup.Outputs.JiraELBSG"
        PMS3Logging: !GetAtt "MyS3Bucket.Outputs.S3Logging"
        PMPublicSubnets: !GetAtt "MyVPC.Outputs.PublicSubnets"


  MyJiraAutoScaling:
    Type: "AWS::CloudFormation::Stack"
    #Condition: "UseProdEnv"
    DependsOn:
    - "MyJiraELB"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/atlassian-autoscaling-jira.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMKeyName: !Ref "PMKeyName"
        PMJiraInstanceType: !Ref "PMJiraInstanceType"
        PMRegionAMI: !FindInMap ["RegionMap", !Ref "AWS::Region", "AMI"]
        PMMyJiraSG: !GetAtt "MySecurityGroup.Outputs.MyJiraSG"
        PMJiraLoadBalancer: !GetAtt "MyJiraELB.Outputs.JiraLoadBalancer"
        PMIAMS3CWInstanceProfile: !GetAtt "MyIAMRole.Outputs.IAMS3CWInstanceProfile"
        PMPublicSubnets: !GetAtt "MyVPC.Outputs.PublicSubnets"
        PMAutoscaleMin: !FindInMap ["EnvMap", !Ref "AWS::StackName", "AutoscaleMin"]
        PMAutoscaleMax: !FindInMap ["EnvMap", !Ref "AWS::StackName", "AutoscaleMax"]
        PMAutoscaleDes: !FindInMap ["EnvMap", !Ref "AWS::StackName", "AutoscaleDes"]

  MyDNS:
    Type: "AWS::CloudFormation::Stack"
    Condition: "UseProdEnv"
    DependsOn:
    - "MyJiraAutoScaling"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/atlassian-route53.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMJiraLBDNSName: !GetAtt "MyJiraELB.Outputs.JiraLBDNSName"
        PMJiraLBHostedZoneId: !GetAtt "MyJiraELB.Outputs.JiraLBHostedZoneId"
        PMDomainJira: !FindInMap ["EnvMap", !Ref "AWS::StackName", "DomainJira"]
        PMHostedZone: !Ref "PMHostedZone"

Outputs:

  Jiraserver:
    Description: "Jira Server Site"
    Value:
      Fn::Join:
        - ''
        - - "http://"
          - !FindInMap ["EnvMap", !Ref "AWS::StackName", "DomainJira"]
          - "/"

  # Own Certs
  # https://cloudonaut.io/pitfall-acm-certificate-cloudfront-cloudformation/
  # Error : The specified SSL certificate doesn't exist, isn't valid, or doesn't include a valid certificate chain.
  # But the ACM certificate needs to be created in us-east-1 when used together with CloudFront. 
  # So one possible solution was to create the CloudFormation stack in us-east-1. Lesson learned! :)
  PMDomain1CertARN:
    Description: "A reference to SSL Certificate ARN of the region"
    Value: !FindInMap ["RegionMap", "us-east-1", "CertARN"]
    Export:
      Name: !Sub "${AWS::StackName}CDN-PMDomain1CertARN"
